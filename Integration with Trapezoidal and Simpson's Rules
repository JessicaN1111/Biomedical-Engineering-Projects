% Define the function symbolically (so we can use int)

syms x;
f=sin(0.5*sqrt(x)) + 1.2^x;
% Perform the symbolic integration
analytic_integral=int(f,x,0.2,5); 
analytic_result=double(analytic_integral); % Convert to numeric value
disp(['Analytical integral result: ',num2str(analytic_result)]);


% Define the function as an anonymous function for numerical methods
f_numeric=@(x)sin(0.5*sqrt(x))+1.2.^x;

% Visualization of the function
x_vals_plot=linspace(0.2,5,500); % just picked a lot of points
y_vals_plot=f_numeric(x_vals_plot);

figure;
plot(x_vals_plot,y_vals_plot, 'b-')
grid on;

% Start the numerical integration part using convolutions

% Trapezoidal Rule ------------------------------------
% Initialize
segments=2; % Start with 2 segments
error_trap=Inf; %initialize the value
error_tolerance=1; % 1% error

% Loop for increasing segments until error is below tolerance
while error_trap>error_tolerance
    % Define the x values (from 0.2 to 5) and divide it by the current
    % number of segments
    x_vals=linspace(0.2,5,segments+1); 
    h=x_vals(2)-x_vals(1); % Step size (step size is consistent)
    
    % Function values at the x points
    f_vals=f_numeric(x_vals); 
    
    % Trapezoidal Rule Kernel
    kernel_trap=[0.5,ones(1,segments-1),0.5]*h; % Kernel for trapezoidal rule
    trap_result = conv(f_vals, kernel_trap,'valid'); % Convolution for trapezoidal rule
    trap_integral = sum(trap_result); % Total integral using trapezoidal rule
    error_trap = abs((trap_integral - analytic_result) / analytic_result)*100; % Calculate error
    
    % Increase segments for the next iteration
    segments = segments + 1;
end

disp(['Final Trapezoidal Rule result: ', num2str(trap_integral)]);
disp(['Final number of segments: ', num2str(segments-1)]);
disp(['Final error for Trapezoidal Rule %: ', num2str(error_trap)]);





%Simpson's 1/3 Rule -------------------------------------
segments=2; % Start with 2 segments
error_simpson13=Inf; %initialize

% Loop for Simpson's 1/3 rule until error is below tolerance
while error_simpson13 > error_tolerance
    if mod(segments, 2) == 0 % Simpson’s 1/3 rule requires an even number of segments
        % Define the x values (from 0.2 to 5) with 'segments' divisions
        x_vals = linspace(0.2, 5, segments + 1); 
        h=x_vals(2)-x_vals(1); % Step size
        
        % Function values at the x points
        f_vals=f_numeric(x_vals); 
        
        % Simpson's 1/3 Rule Kernel
        kernel_simpson13 = [1, 4, 2, 4, 1] * (h / 3); % Kernel for Simpson's 1/3 rule
        simpson13_result=conv(f_vals, kernel_simpson13, 'valid');
        simpson13_integral=sum(simpson13_result); % Total integral using Simpson's 1/3 rule
        error_simpson13=abs((simpson13_integral-analytic_result)/analytic_result)*100; % Calculate error
   
    end
    
    % Increase segments for the next iteration
    segments=segments+2; % for simpsons 1/3, you need to increase by two
end

disp(['Final Simpson’s 1/3 Rule result: ', num2str(simpson13_integral)]);
disp(['Final number of segments: ', num2str(segments-2)]);
disp(['Final error for Simpson’s 1/3 Rule %: ', num2str(error_simpson13)]);



% Simpson's 3/8 Rule ------------------------------------
% I couldn't figure out how to use a kernel to do this one so I just did it
% using the formula.

% Define the function numerically for numerical integration
f = @(x)sin(0.5*sqrt(x))+1.2.^x;

% Integration limits
a=0.2;
b=5;

% Initialization
segments=3; % Start with minimum segments for 3/8 rule
error_simpson38=inf;


% Iterative calculation using Simpson's 3/8 rule
while error_simpson38>1 
    % Step size
    h=(b-a)/n;
    
    % Compute x and y values
    x=a:h:b;
    y=f(x);
    
    % Simpson's 3/8 Rule formula
    simpson38_integral=(3*h/8)*(y(1)+3*sum(y(2:3:end-1))+3*sum(y(3:3:end-1))+2*sum(y(4:3:end-3))+y(end));
    
    % Compute error compared to the analytical result
    error_simpson38=abs((integral-analytic_result)/analytic_result)*100;
    
    % Update for next iteration
    segments=segments+3; % Increase segments by a multiple of 3
end

% Display results
disp(['Final Simpson''s 3/8 Rule result: ', num2str(simpson38_integral)]);
disp(['Final number of segments: ', num2str(segments-3)]);
disp(['Final error for Simpson''s 3/8 Rule %: ', num2str(error_simpson38)]);

